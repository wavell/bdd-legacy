Before('@firefox') do

  Capybara.app_host = $workingAppHostLink

  Capybara.current_driver = :selenium_firefox
  visit $workingAppLoginRoute

end

After('@firefox') do
  Capybara.use_default_driver
end

Before('@ie') do
  Capybara.app_host = $workingAppHostLink 
  Capybara.current_driver = :selenium_ie if $isWindows
  visit $workingAppLoginRoute
end

After('@ie') do
  Capybara.use_default_driver
end

When /^I press "([^"]*)"$/ do |arg1|
  continue = find_by_id arg1
  continue.click
end

#example of making something ie specific
Given /^I press "([^"]*)" in internet explorer$/ do |arg1|
  mybutton = find_button arg1
  mybutton.click
end

Then /^I select the link "([^"]*)"$/ do |arg1|
  click_link arg1
end

# force a link .. use if link not visible  (not visible links not supported yet for capybara)
Given /^I navigate to the link for "([^"]*)"$/ do |arg1|
  page.execute_script("document.location.href('#{arg1}')")
  sleep 3.0
end
# sometimes only click_on works ...
When /^I click on "([^"]*)"$/ do |arg1|
  click_on arg1
end

Then /^I should see "([^"]*)"$/ do |arg1|
  page.should have_content(arg1)
end

Then /^I should not see "([^"]*)"$/ do |arg1|
    page.should_not have_content(arg1)
end

Given /^I evaluate the script for "([^"]*)"$/ do |arg1|
  page.evaluate_script arg1
end

# popup example
Then /^within the "([^"]*)" window, I should see "([^"]*)"$/ do |arg1, arg2|
  page.within_window(arg1){page.should have_content(arg2)}
end

Then /^within the "([^"]*)" window, I click on "([^"]*)"$/ do |arg1, arg2|
    page.within_window(arg1){click_on arg2}
end

Then /^within the "([^"]*)" window, I select "([^"]*)"$/ do |arg1, arg2|
  page.within_window(arg1) do 
    myelem = page.find(:xpath, "//*[@value='#{arg2}']")
    myelem.click
  end
end

Then /^within the "([^"]*)" window, I select the "([^"]*)" row$/ do |arg1, arg2|
  page.within_window(arg1) do 
    page.find(:xpath, "//td[contains(.,'#{arg2}')]").click
  end
end

Then /^I should see "([^"]*)" in a field$/ do |arg1|
  page.should have_xpath("//*[@value='#{arg1}']")
end

Then /^I should not see "([^"]*)" in a field$/ do |arg1|
  page.should_not have_xpath("//*[@value='#{arg1}']")
end
Then /^I should see "([^"]*)" in a dropdown$/ do |arg1|
  page.should have_xpath ("//option[text()='#{arg1}']")
end

Then /^I should see a "([^"]*)" button$/ do |arg1|
  page.should have_button(arg1)
end

# sometimes this is slow and buggy so had to add sleeps
Then /^I select "([^"]*)" from a dropdown$/ do |arg1|
  sleep 2.5
  myselect = page.find(:xpath, "//select[option[text()='#{arg1}']]")
  sleep 1.5
  myoption = page.find(:xpath, "//option[text()='#{arg1}']")
  # select(myoption, :from => myselect)
  # select("#{arg1}")
  sleep 1.5
  myoption.select_option
  sleep 1.5
end

Then /^I select the text "([^"]*)"$/ do |arg1|
  # .click right on the object works, afterwards doesn't ..
  myelem = page.find(:xpath, "//*[text()='#{arg1}']").click
end
Then /^I should not see "([^"]*)" in a dropdown$/ do |arg1|
  page.should_not have_xpath ("//option[text()='#{arg1}']")
end
Then /^I enter '(\d+)' into the "([^"]*)" field$/ do |arg1, arg2|
  fill_in arg2, :with => arg1
end

Given /^I enter "([^"]*)" into the "([^"]*)" field$/ do |arg1, arg2|
  fill_in arg2, :with => arg1
end

Given /^I refresh the page$/ do
  visit(current_url)
end

# get sibling (img) of same row in a table and click on it.
# modify to fit your needs
# need to click on td element not img element (hence /.. at end of xpath)
# also can't assign then click (!). need to call object directly on find (wtf)
Given /^I click on the image in the "([^"]*)" row$/ do |arg1|
  find(:xpath, "//img[../../td[*[text()='#{arg1}']]]/..").click
end

 
Then /^the value for "([^"]*)" in the "([^"]*)" row should not be empty$/ do |arg1, arg2|
  myrow = page.find(:xpath, "//td[@id='#{arg1}' and ../td[*[text()='#{arg2}']]]")
  myrow['value'].should_not == ""
end